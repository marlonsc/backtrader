from .lineiterator import IndicatorBase as IndicatorBase, LineIterator as LineIterator
from .lineseries import Lines as Lines
from .metabase import AutoInfoClass as AutoInfoClass
from .utils.py3 import range as range, with_metaclass as with_metaclass
from _typeshed import Incomplete

class MetaIndicator(IndicatorBase.__class__):
    @classmethod
    def cleancache(cls) -> None: ...
    @classmethod
    def usecache(cls, onoff) -> None: ...
    def __call__(cls, *args, **kwargs): ...
    def __init__(cls, name, bases, dct) -> None: ...

class Indicator(Incomplete):
    csv: bool
    def advance(self, size: int = 1) -> None: ...
    def preonce_via_prenext(self, start, end) -> None: ...
    def oncestart_via_nextstart(self, start, end) -> None: ...
    def once_via_next(self, start, end) -> None: ...

class MtLinePlotterIndicator(Indicator.__class__):
    def donew(cls, *args, **kwargs): ...

class LinePlotterIndicator(Incomplete): ...
