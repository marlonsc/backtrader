from .lineroot import LineMultiple as LineMultiple, LineRoot as LineRoot, LineSingle as LineSingle
from .utils import num2date as num2date, time2num as time2num
from .utils.py3 import range as range, string_types as string_types, with_metaclass as with_metaclass
from _typeshed import Incomplete

NAN: Incomplete

class LineBuffer(LineSingle):
    UnBounded: Incomplete
    QBuffer: Incomplete
    lines: Incomplete
    mode: Incomplete
    bindings: Incomplete
    def __init__(self) -> None: ...
    def get_idx(self): ...
    def set_idx(self, idx, force: bool = False) -> None: ...
    idx: Incomplete
    array: Incomplete
    useislice: bool
    lencount: int
    extension: int
    def reset(self) -> None: ...
    maxlen: Incomplete
    extrasize: Incomplete
    lenmark: Incomplete
    def qbuffer(self, savemem: int = 0, extrasize: int = 0) -> None: ...
    def getindicators(self): ...
    def minbuffer(self, size) -> None: ...
    def __len__(self) -> int: ...
    def buflen(self): ...
    def __getitem__(self, ago): ...
    def get(self, ago: int = 0, size: int = 1): ...
    def getzeroval(self, idx: int = 0): ...
    def getzero(self, idx: int = 0, size: int = 1): ...
    def __setitem__(self, ago, value) -> None: ...
    def set(self, value, ago: int = 0) -> None: ...
    def home(self) -> None: ...
    def forward(self, value=..., size: int = 1) -> None: ...
    def backwards(self, size: int = 1, force: bool = False) -> None: ...
    def rewind(self, size: int = 1) -> None: ...
    def advance(self, size: int = 1) -> None: ...
    def extend(self, value=..., size: int = 0) -> None: ...
    def addbinding(self, binding) -> None: ...
    def plot(self, idx: int = 0, size: Incomplete | None = None): ...
    def plotrange(self, start, end): ...
    def oncebinding(self) -> None: ...
    def bind2lines(self, binding: int = 0): ...
    bind2line = bind2lines
    def __call__(self, ago: Incomplete | None = None): ...
    def datetime(self, ago: int = 0, tz: Incomplete | None = None, naive: bool = True): ...
    def date(self, ago: int = 0, tz: Incomplete | None = None, naive: bool = True): ...
    def time(self, ago: int = 0, tz: Incomplete | None = None, naive: bool = True): ...
    def dt(self, ago: int = 0): ...
    def tm_raw(self, ago: int = 0): ...
    def tm(self, ago: int = 0): ...
    def tm_lt(self, other, ago: int = 0): ...
    def tm_le(self, other, ago: int = 0): ...
    def tm_eq(self, other, ago: int = 0): ...
    def tm_gt(self, other, ago: int = 0): ...
    def tm_ge(self, other, ago: int = 0): ...
    def tm2dtime(self, tm, ago: int = 0): ...
    def tm2datetime(self, tm, ago: int = 0): ...

class MetaLineActions(LineBuffer.__class__):
    @classmethod
    def cleancache(cls) -> None: ...
    @classmethod
    def usecache(cls, onoff) -> None: ...
    def __call__(cls, *args, **kwargs): ...
    def dopreinit(cls, _obj, *args, **kwargs): ...
    def dopostinit(cls, _obj, *args, **kwargs): ...

class PseudoArray:
    wrapped: Incomplete
    def __init__(self, wrapped) -> None: ...
    def __getitem__(self, key): ...
    @property
    def array(self): ...

class LineActions(Incomplete):
    def getindicators(self): ...
    def qbuffer(self, savemem: int = 0) -> None: ...
    @staticmethod
    def arrayize(obj): ...

def LineDelay(a, ago: int = 0, **kwargs): ...
def LineNum(num): ...

class _LineDelay(LineActions):
    a: Incomplete
    ago: Incomplete
    def __init__(self, a, ago) -> None: ...
    def next(self) -> None: ...
    def once(self, start, end) -> None: ...

class _LineForward(LineActions):
    a: Incomplete
    ago: Incomplete
    def __init__(self, a, ago) -> None: ...
    def next(self) -> None: ...
    def once(self, start, end) -> None: ...

class LinesOperation(LineActions):
    operation: Incomplete
    a: Incomplete
    b: Incomplete
    r: Incomplete
    bline: Incomplete
    btime: Incomplete
    bfloat: Incomplete
    def __init__(self, a, b, operation, r: bool = False) -> None: ...
    def next(self) -> None: ...
    def once(self, start, end) -> None: ...

class LineOwnOperation(LineActions):
    operation: Incomplete
    a: Incomplete
    def __init__(self, a, operation) -> None: ...
    def next(self) -> None: ...
    def once(self, start, end) -> None: ...
