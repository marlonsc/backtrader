from .lineiterator import LineIterator as LineIterator, StrategyBase as StrategyBase
from .lineroot import LineSingle as LineSingle
from .lineseries import LineSeriesStub as LineSeriesStub
from .metabase import ItemCollection as ItemCollection, findowner as findowner
from .trade import Trade as Trade
from .utils import AutoDictList as AutoDictList, AutoOrderedDict as AutoOrderedDict
from .utils.py3 import MAXINT as MAXINT, filter as filter, integer_types as integer_types, iteritems as iteritems, keys as keys, map as map, string_types as string_types, with_metaclass as with_metaclass
from _typeshed import Incomplete
from backtrader.order import Order as Order

class MetaStrategy(StrategyBase.__class__):
    def __new__(meta, name, bases, dct): ...
    def __init__(cls, name, bases, dct) -> None: ...
    def donew(cls, *args, **kwargs): ...
    def dopreinit(cls, _obj, *args, **kwargs): ...
    def dopostinit(cls, _obj, *args, **kwargs): ...

class Strategy(Incomplete):
    csv: bool
    lines: Incomplete
    def qbuffer(self, savemem: int = 0, replaying: bool = False) -> None: ...
    def prenext_open(self) -> None: ...
    def nextstart_open(self) -> None: ...
    def next_open(self) -> None: ...
    def start(self) -> None: ...
    indobscsv: Incomplete
    def getwriterheaders(self): ...
    def getwritervalues(self): ...
    def getwriterinfo(self): ...
    def stop(self) -> None: ...
    def set_tradehistory(self, onoff: bool = True) -> None: ...
    def clear(self) -> None: ...
    def add_timer(self, when, offset=..., repeat=..., weekdays=[], weekcarry: bool = False, monthdays=[], monthcarry: bool = True, allow: Incomplete | None = None, tzdata: Incomplete | None = None, cheat: bool = False, *args, **kwargs): ...
    def notify_timer(self, timer, when, *args, **kwargs) -> None: ...
    def notify_cashvalue(self, cash, value) -> None: ...
    def notify_fund(self, cash, value, fundvalue, shares) -> None: ...
    def notify_order(self, order) -> None: ...
    def notify_trade(self, trade) -> None: ...
    def notify_store(self, msg, *args, **kwargs) -> None: ...
    def notify_data(self, data, status, *args, **kwargs) -> None: ...
    def getdatanames(self): ...
    def getdatabyname(self, name): ...
    def cancel(self, order) -> None: ...
    def buy(self, data: Incomplete | None = None, size: Incomplete | None = None, price: Incomplete | None = None, plimit: Incomplete | None = None, exectype: Incomplete | None = None, valid: Incomplete | None = None, tradeid: int = 0, oco: Incomplete | None = None, trailamount: Incomplete | None = None, trailpercent: Incomplete | None = None, parent: Incomplete | None = None, transmit: bool = True, **kwargs): ...
    def sell(self, data: Incomplete | None = None, size: Incomplete | None = None, price: Incomplete | None = None, plimit: Incomplete | None = None, exectype: Incomplete | None = None, valid: Incomplete | None = None, tradeid: int = 0, oco: Incomplete | None = None, trailamount: Incomplete | None = None, trailpercent: Incomplete | None = None, parent: Incomplete | None = None, transmit: bool = True, **kwargs): ...
    def close(self, data: Incomplete | None = None, size: Incomplete | None = None, **kwargs): ...
    def buy_bracket(self, data: Incomplete | None = None, size: Incomplete | None = None, price: Incomplete | None = None, plimit: Incomplete | None = None, exectype=..., valid: Incomplete | None = None, tradeid: int = 0, trailamount: Incomplete | None = None, trailpercent: Incomplete | None = None, oargs={}, stopprice: Incomplete | None = None, stopexec=..., stopargs={}, limitprice: Incomplete | None = None, limitexec=..., limitargs={}, **kwargs): ...
    def sell_bracket(self, data: Incomplete | None = None, size: Incomplete | None = None, price: Incomplete | None = None, plimit: Incomplete | None = None, exectype=..., valid: Incomplete | None = None, tradeid: int = 0, trailamount: Incomplete | None = None, trailpercent: Incomplete | None = None, oargs={}, stopprice: Incomplete | None = None, stopexec=..., stopargs={}, limitprice: Incomplete | None = None, limitexec=..., limitargs={}, **kwargs): ...
    def order_target_size(self, data: Incomplete | None = None, target: int = 0, **kwargs): ...
    def order_target_value(self, data: Incomplete | None = None, target: float = 0.0, price: Incomplete | None = None, **kwargs): ...
    def order_target_percent(self, data: Incomplete | None = None, target: float = 0.0, **kwargs): ...
    def getposition(self, data: Incomplete | None = None, broker: Incomplete | None = None): ...
    position: Incomplete
    def getpositionbyname(self, name: Incomplete | None = None, broker: Incomplete | None = None): ...
    positionbyname: Incomplete
    def getpositions(self, broker: Incomplete | None = None): ...
    positions: Incomplete
    def getpositionsbyname(self, broker: Incomplete | None = None): ...
    positionsbyname: Incomplete
    def setsizer(self, sizer): ...
    def getsizer(self): ...
    sizer: Incomplete
    def getsizing(self, data: Incomplete | None = None, isbuy: bool = True): ...

class MetaSigStrategy(Strategy.__class__):
    def __new__(meta, name, bases, dct): ...
    def dopreinit(cls, _obj, *args, **kwargs): ...
    def dopostinit(cls, _obj, *args, **kwargs): ...

class SignalStrategy(Incomplete):
    params: Incomplete
    def signal_add(self, sigtype, signal) -> None: ...
