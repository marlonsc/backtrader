from .utils.py3 import string_types as string_types, with_metaclass as with_metaclass, zip as zip
from _typeshed import Incomplete

def findbases(kls, topclass): ...
def findowner(owned, cls, startlevel: int = 2, skip: Incomplete | None = None): ...

class MetaBase(type):
    def doprenew(cls, *args, **kwargs): ...
    def donew(cls, *args, **kwargs): ...
    def dopreinit(cls, _obj, *args, **kwargs): ...
    def doinit(cls, _obj, *args, **kwargs): ...
    def dopostinit(cls, _obj, *args, **kwargs): ...
    def __call__(cls, *args, **kwargs): ...

class AutoInfoClass:
    def isdefault(self, pname): ...
    def notdefault(self, pname): ...
    def __new__(cls, *args, **kwargs): ...

class MetaParams(MetaBase):
    def __new__(meta, name, bases, dct): ...
    def donew(cls, *args, **kwargs): ...

class ParamsBase(Incomplete): ...

class ItemCollection:
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def append(self, item, name: Incomplete | None = None) -> None: ...
    def __getitem__(self, key): ...
    def getnames(self): ...
    def getitems(self): ...
    def getbyname(self, name): ...
