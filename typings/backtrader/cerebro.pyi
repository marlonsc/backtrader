import collections
from . import indicator as indicator, linebuffer as linebuffer, observers as observers
from .brokers import BackBroker as BackBroker
from .metabase import MetaParams as MetaParams
from .strategy import SignalStrategy as SignalStrategy, Strategy as Strategy
from .timer import Timer as Timer
from .tradingcal import PandasMarketCalendar as PandasMarketCalendar, TradingCalendarBase as TradingCalendarBase
from .utils import OrderedDict as OrderedDict, date2num as date2num, num2date as num2date, tzparse as tzparse
from .utils.py3 import integer_types as integer_types, map as map, range as range, string_types as string_types, with_metaclass as with_metaclass, zip as zip
from .writer import WriterFile as WriterFile
from _typeshed import Incomplete

collectionsAbc = collections.abc
collectionsAbc = collections

class OptReturn:
    p: Incomplete
    def __init__(self, params, **kwargs) -> None: ...

class Cerebro(Incomplete):
    params: Incomplete
    stores: Incomplete
    feeds: Incomplete
    datas: Incomplete
    datasbyname: Incomplete
    strats: Incomplete
    optcbs: Incomplete
    observers: Incomplete
    analyzers: Incomplete
    indicators: Incomplete
    sizers: Incomplete
    writers: Incomplete
    storecbs: Incomplete
    datacbs: Incomplete
    signals: Incomplete
    def __init__(self) -> None: ...
    @staticmethod
    def iterize(iterable): ...
    def set_fund_history(self, fund) -> None: ...
    def add_order_history(self, orders, notify: bool = True) -> None: ...
    def notify_timer(self, timer, when, *args, **kwargs) -> None: ...
    def add_timer(self, when, offset=..., repeat=..., weekdays=[], weekcarry: bool = False, monthdays=[], monthcarry: bool = True, allow: Incomplete | None = None, tzdata: Incomplete | None = None, strats: bool = False, cheat: bool = False, *args, **kwargs): ...
    def addtz(self, tz) -> None: ...
    def addcalendar(self, cal) -> None: ...
    def add_signal(self, sigtype, sigcls, *sigargs, **sigkwargs) -> None: ...
    def signal_strategy(self, stratcls, *args, **kwargs) -> None: ...
    def signal_concurrent(self, onoff) -> None: ...
    def signal_accumulate(self, onoff) -> None: ...
    def addstore(self, store) -> None: ...
    def addwriter(self, wrtcls, *args, **kwargs) -> None: ...
    def addsizer(self, sizercls, *args, **kwargs) -> None: ...
    def addsizer_byidx(self, idx, sizercls, *args, **kwargs) -> None: ...
    def addindicator(self, indcls, *args, **kwargs) -> None: ...
    def addanalyzer(self, ancls, *args, **kwargs) -> None: ...
    def addobserver(self, obscls, *args, **kwargs) -> None: ...
    def addobservermulti(self, obscls, *args, **kwargs) -> None: ...
    def addstorecb(self, callback) -> None: ...
    def notify_store(self, msg, *args, **kwargs) -> None: ...
    def adddatacb(self, callback) -> None: ...
    def notify_data(self, data, status, *args, **kwargs) -> None: ...
    def adddata(self, data, name: Incomplete | None = None): ...
    def chaindata(self, *args, **kwargs): ...
    def rolloverdata(self, *args, **kwargs): ...
    def replaydata(self, dataname, name: Incomplete | None = None, **kwargs): ...
    def resampledata(self, dataname, name: Incomplete | None = None, **kwargs): ...
    def optcallback(self, cb) -> None: ...
    def optstrategy(self, strategy, *args, **kwargs) -> None: ...
    def addstrategy(self, strategy, *args, **kwargs): ...
    def setbroker(self, broker): ...
    def getbroker(self): ...
    broker: Incomplete
    def plot(self, plotter: Incomplete | None = None, numfigs: int = 1, iplot: bool = True, start: Incomplete | None = None, end: Incomplete | None = None, width: int = 16, height: int = 9, dpi: int = 300, tight: bool = True, use: Incomplete | None = None, **kwargs): ...
    def __call__(self, iterstrat): ...
    def runstop(self) -> None: ...
    runwriters: Incomplete
    writers_csv: Incomplete
    runstrats: Incomplete
    def run(self, **kwargs): ...
    runningstrats: Incomplete
    def runstrategies(self, iterstrat, predata: bool = False): ...
    def stop_writers(self, runstrats) -> None: ...
