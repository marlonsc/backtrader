from _typeshed import Incomplete
from backtrader import BrokerBase as BrokerBase, BuyOrder as BuyOrder, Order as Order, SellOrder as SellOrder
from backtrader.comminfo import CommInfoBase as CommInfoBase
from backtrader.position import Position as Position
from backtrader.stores import oandastore as oandastore
from backtrader.utils.py3 import with_metaclass as with_metaclass

class OandaCommInfo(CommInfoBase):
    def getvaluesize(self, size, price): ...
    def getoperationcost(self, size, price): ...

class MetaOandaBroker(BrokerBase.__class__):
    def __init__(cls, name, bases, dct) -> None: ...

class OandaBroker(Incomplete):
    params: Incomplete
    o: Incomplete
    orders: Incomplete
    notifs: Incomplete
    opending: Incomplete
    brackets: Incomplete
    startingcash: float
    startingvalue: float
    positions: Incomplete
    def __init__(self, **kwargs) -> None: ...
    def start(self) -> None: ...
    def data_started(self, data) -> None: ...
    def stop(self) -> None: ...
    cash: Incomplete
    def getcash(self): ...
    value: Incomplete
    def getvalue(self, datas: Incomplete | None = None): ...
    def getposition(self, data, clone: bool = True): ...
    def orderstatus(self, order): ...
    def buy(self, owner, data, size, price: Incomplete | None = None, plimit: Incomplete | None = None, exectype: Incomplete | None = None, valid: Incomplete | None = None, tradeid: int = 0, oco: Incomplete | None = None, trailamount: Incomplete | None = None, trailpercent: Incomplete | None = None, parent: Incomplete | None = None, transmit: bool = True, **kwargs): ...
    def sell(self, owner, data, size, price: Incomplete | None = None, plimit: Incomplete | None = None, exectype: Incomplete | None = None, valid: Incomplete | None = None, tradeid: int = 0, oco: Incomplete | None = None, trailamount: Incomplete | None = None, trailpercent: Incomplete | None = None, parent: Incomplete | None = None, transmit: bool = True, **kwargs): ...
    def cancel(self, order): ...
    def notify(self, order) -> None: ...
    def get_notification(self): ...
    def next(self) -> None: ...
