import backtrader as bt
from _typeshed import Incomplete

__all__ = ['BackBroker', 'BrokerBack']

class BackBroker(bt.BrokerBase):
    params: Incomplete
    def __init__(self) -> None: ...
    startingcash: Incomplete
    orders: Incomplete
    pending: Incomplete
    positions: Incomplete
    d_credit: Incomplete
    notifs: Incomplete
    submitted: Incomplete
    def init(self) -> None: ...
    def get_notification(self): ...
    def set_fundmode(self, fundmode, fundstartval: Incomplete | None = None) -> None: ...
    def get_fundmode(self): ...
    fundmode: Incomplete
    def set_fundstartval(self, fundstartval) -> None: ...
    def set_int2pnl(self, int2pnl) -> None: ...
    def set_coc(self, coc) -> None: ...
    def set_coo(self, coo) -> None: ...
    def set_shortcash(self, shortcash) -> None: ...
    def set_slippage_perc(self, perc, slip_open: bool = True, slip_limit: bool = True, slip_match: bool = True, slip_out: bool = False) -> None: ...
    def set_slippage_fixed(self, fixed, slip_open: bool = True, slip_limit: bool = True, slip_match: bool = True, slip_out: bool = False) -> None: ...
    def set_filler(self, filler) -> None: ...
    def set_checksubmit(self, checksubmit) -> None: ...
    def set_eosbar(self, eosbar) -> None: ...
    seteosbar = set_eosbar
    def get_cash(self): ...
    getcash = get_cash
    def set_cash(self, cash) -> None: ...
    setcash = set_cash
    def add_cash(self, cash) -> None: ...
    def get_fundshares(self): ...
    fundshares: Incomplete
    def get_fundvalue(self): ...
    fundvalue: Incomplete
    def cancel(self, order, bracket: bool = False): ...
    def get_value(self, datas: Incomplete | None = None, mkt: bool = False, lever: bool = False): ...
    getvalue = get_value
    def get_value_lever(self, datas: Incomplete | None = None, mkt: bool = False): ...
    def get_leverage(self): ...
    def get_orders_open(self, safe: bool = False): ...
    def getposition(self, data): ...
    def orderstatus(self, order): ...
    def submit(self, order, check: bool = True): ...
    def transmit(self, order, check: bool = True): ...
    def check_submitted(self) -> None: ...
    def submit_accept(self, order) -> None: ...
    def add_order_history(self, orders, notify: bool = True) -> None: ...
    def set_fund_history(self, fund) -> None: ...
    def buy(self, owner, data, size, price: Incomplete | None = None, plimit: Incomplete | None = None, exectype: Incomplete | None = None, valid: Incomplete | None = None, tradeid: int = 0, oco: Incomplete | None = None, trailamount: Incomplete | None = None, trailpercent: Incomplete | None = None, parent: Incomplete | None = None, transmit: bool = True, histnotify: bool = False, _checksubmit: bool = True, **kwargs): ...
    def sell(self, owner, data, size, price: Incomplete | None = None, plimit: Incomplete | None = None, exectype: Incomplete | None = None, valid: Incomplete | None = None, tradeid: int = 0, oco: Incomplete | None = None, trailamount: Incomplete | None = None, trailpercent: Incomplete | None = None, parent: Incomplete | None = None, transmit: bool = True, histnotify: bool = False, _checksubmit: bool = True, **kwargs): ...
    def notify(self, order) -> None: ...
    def next(self) -> None: ...
BrokerBack = BackBroker
