from _typeshed import Incomplete
from backtrader import TimeFrame as TimeFrame
from backtrader.metabase import MetaParams as MetaParams
from backtrader.utils.py3 import queue as queue, with_metaclass as with_metaclass

class _SymInfo:
    def __init__(self, syminfo) -> None: ...

def PumpEvents(timeout: int = -1, hevt: Incomplete | None = None, cb: Incomplete | None = None): ...

class RTEventSink:
    store: Incomplete
    vcrtmod: Incomplete
    lastconn: Incomplete
    def __init__(self, store) -> None: ...
    def OnNewTicks(self, ArrayTicks) -> None: ...
    def OnServerShutDown(self) -> None: ...
    def OnInternalEvent(self, p1, p2, p3) -> None: ...

class MetaSingleton(MetaParams):
    def __init__(cls, name, bases, dct) -> None: ...
    def __call__(cls, *args, **kwargs): ...

class VCStore(Incomplete):
    BrokerCls: Incomplete
    DataCls: Incomplete
    MAXUINT: Incomplete
    MAXDATE1: Incomplete
    MAXDATE2: Incomplete
    @classmethod
    def getdata(cls, *args, **kwargs): ...
    @classmethod
    def getbroker(cls, *args, **kwargs): ...
    VC64_DLLS: Incomplete
    VC_DLLS: Incomplete
    VC_TLIBS: Incomplete
    VC_KEYNAME: str
    VC_KEYVAL: str
    VC_BINPATH: str
    def find_vchart(self): ...
    notifs: Incomplete
    t_vcconn: Incomplete
    vcdsmod: Incomplete
    vcrtmod: Incomplete
    vcctmod: Incomplete
    vcds: Incomplete
    vcct: Incomplete
    vcrt: Incomplete
    vcrtfields: Incomplete
    def __init__(self) -> None: ...
    def put_notification(self, msg, *args, **kwargs) -> None: ...
    def get_notifications(self): ...
    def start(self, data: Incomplete | None = None, broker: Incomplete | None = None) -> None: ...
    def stop(self) -> None: ...
    def connected(self): ...
