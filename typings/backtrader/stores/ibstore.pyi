from _typeshed import Incomplete
from backtrader.dataseries import TimeFrame as TimeFrame
from backtrader.position import Position as Position
from backtrader.utils.autodict import AutoDict as AutoDict
from backtrader.utils.dateintern import UTC as UTC
from backtrader.utils.py3 import long as long, with_metaclass as with_metaclass

class RTVolume:
    price: Incomplete
    def __init__(self, rtvol: str = '', price: Incomplete | None = None, tmoffset: Incomplete | None = None) -> None: ...

class MetaSingleton(type):
    def __init__(cls, name, bases, dct) -> None: ...
    def __call__(cls, *args, **kwargs): ...

def ibregister(f): ...

class IBStore(Incomplete):
    REQIDBASE: int
    BrokerCls: Incomplete
    DataCls: Incomplete
    params: Incomplete
    @classmethod
    def getdata(cls, *args, **kwargs): ...
    @classmethod
    def getbroker(cls, *args, **kwargs): ...
    dontreconnect: bool
    broker: Incomplete
    datas: Incomplete
    ccount: int
    tmoffset: Incomplete
    qs: Incomplete
    ts: Incomplete
    iscash: Incomplete
    histexreq: Incomplete
    histfmt: Incomplete
    histsend: Incomplete
    histtz: Incomplete
    acc_cash: Incomplete
    acc_value: Incomplete
    acc_upds: Incomplete
    port_update: bool
    positions: Incomplete
    orderid: Incomplete
    cdetails: Incomplete
    managed_accounts: Incomplete
    notifs: Incomplete
    clientId: Incomplete
    conn: Incomplete
    revdur: Incomplete
    def __init__(self) -> None: ...
    def start(self, data: Incomplete | None = None, broker: Incomplete | None = None): ...
    def stop(self) -> None: ...
    def logmsg(self, *args) -> None: ...
    def watcher(self, msg) -> None: ...
    def connected(self): ...
    def reconnect(self, fromstart: bool = False, resub: bool = False): ...
    def startdatas(self) -> None: ...
    def stopdatas(self) -> None: ...
    def get_notifications(self): ...
    def error(self, msg) -> None: ...
    def connectionClosed(self, msg) -> None: ...
    def managedAccounts(self, msg) -> None: ...
    def reqCurrentTime(self) -> None: ...
    def currentTime(self, msg) -> None: ...
    def timeoffset(self): ...
    def nextTickerId(self): ...
    def nextValidId(self, msg) -> None: ...
    def nextOrderId(self): ...
    def reuseQueue(self, tickerId): ...
    def getTickerQueue(self, start: bool = False): ...
    def cancelQueue(self, q, sendnone: bool = False) -> None: ...
    def validQueue(self, q): ...
    def getContractDetails(self, contract, maxcount: Incomplete | None = None): ...
    def reqContractDetails(self, contract): ...
    def contractDetailsEnd(self, msg) -> None: ...
    def contractDetails(self, msg) -> None: ...
    def reqHistoricalDataEx(self, contract, enddate, begindate, timeframe, compression, what: Incomplete | None = None, useRTH: bool = False, tz: str = '', sessionend: Incomplete | None = None, tickerId: Incomplete | None = None): ...
    def reqHistoricalData(self, contract, enddate, duration, barsize, what: Incomplete | None = None, useRTH: bool = False, tz: str = '', sessionend: Incomplete | None = None): ...
    def cancelHistoricalData(self, q) -> None: ...
    def reqRealTimeBars(self, contract, useRTH: bool = False, duration: int = 5): ...
    def cancelRealTimeBars(self, q) -> None: ...
    def reqMktData(self, contract, what: Incomplete | None = None): ...
    def cancelMktData(self, q) -> None: ...
    def tickString(self, msg) -> None: ...
    def tickPrice(self, msg) -> None: ...
    def realtimeBar(self, msg) -> None: ...
    def historicalData(self, msg) -> None: ...
    def getdurations(self, timeframe, compression): ...
    def getmaxduration(self, timeframe, compression): ...
    def tfcomp_to_size(self, timeframe, compression): ...
    def dt_plus_duration(self, dt, duration): ...
    def calcdurations(self, dtbegin, dtend): ...
    def calcduration(self, dtbegin, dtend): ...
    def histduration(self, dt1, dt2): ...
    def makecontract(self, symbol, sectype, exch, curr, expiry: str = '', strike: float = 0.0, right: str = '', mult: int = 1): ...
    def cancelOrder(self, orderid) -> None: ...
    def placeOrder(self, orderid, contract, order) -> None: ...
    def openOrder(self, msg) -> None: ...
    def execDetails(self, msg) -> None: ...
    def orderStatus(self, msg) -> None: ...
    def commissionReport(self, msg) -> None: ...
    def reqPositions(self) -> None: ...
    def position(self, msg) -> None: ...
    def reqAccountUpdates(self, subscribe: bool = True, account: Incomplete | None = None) -> None: ...
    def accountDownloadEnd(self, msg) -> None: ...
    def updatePortfolio(self, msg) -> None: ...
    def getposition(self, contract, clone: bool = False): ...
    def updateAccountValue(self, msg) -> None: ...
    def get_acc_values(self, account: Incomplete | None = None): ...
    def get_acc_value(self, account: Incomplete | None = None): ...
    def get_acc_cash(self, account: Incomplete | None = None): ...
