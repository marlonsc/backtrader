import oandapy
from _typeshed import Incomplete
from backtrader.metabase import MetaParams as MetaParams
from backtrader.utils.py3 import queue as queue, with_metaclass as with_metaclass

class OandaRequestError(oandapy.OandaError):
    def __init__(self) -> None: ...

class OandaStreamError(oandapy.OandaError):
    def __init__(self, content: str = '') -> None: ...

class OandaTimeFrameError(oandapy.OandaError):
    def __init__(self, content) -> None: ...

class OandaNetworkError(oandapy.OandaError):
    def __init__(self) -> None: ...

class API(oandapy.API):
    def request(self, endpoint, method: str = 'GET', params: Incomplete | None = None): ...

class Streamer(oandapy.Streamer):
    q: Incomplete
    def __init__(self, q, headers: Incomplete | None = None, *args, **kwargs) -> None: ...
    connected: bool
    def run(self, endpoint, params: Incomplete | None = None) -> None: ...
    def on_success(self, data) -> None: ...
    def on_error(self, data) -> None: ...

class MetaSingleton(MetaParams):
    def __init__(cls, name, bases, dct) -> None: ...
    def __call__(cls, *args, **kwargs): ...

class OandaStore(Incomplete):
    BrokerCls: Incomplete
    DataCls: Incomplete
    params: Incomplete
    @classmethod
    def getdata(cls, *args, **kwargs): ...
    @classmethod
    def getbroker(cls, *args, **kwargs): ...
    notifs: Incomplete
    broker: Incomplete
    datas: Incomplete
    oapi: Incomplete
    def __init__(self) -> None: ...
    cash: Incomplete
    def start(self, data: Incomplete | None = None, broker: Incomplete | None = None) -> None: ...
    def stop(self) -> None: ...
    def put_notification(self, msg, *args, **kwargs) -> None: ...
    def get_notifications(self): ...
    def get_positions(self): ...
    def get_granularity(self, timeframe, compression): ...
    def get_instrument(self, dataname): ...
    def streaming_events(self, tmout: Incomplete | None = None): ...
    def candles(self, dataname, dtbegin, dtend, timeframe, compression, candleFormat, includeFirst): ...
    def streaming_prices(self, dataname, tmout: Incomplete | None = None): ...
    def get_cash(self): ...
    def get_value(self): ...
    q_account: Incomplete
    q_ordercreate: Incomplete
    q_orderclose: Incomplete
    def broker_threads(self) -> None: ...
    def order_create(self, order, stopside: Incomplete | None = None, takeside: Incomplete | None = None, **kwargs): ...
    def order_cancel(self, order): ...
