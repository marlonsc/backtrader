from .dataseries import SimpleFilterWrapper as SimpleFilterWrapper
from .resamplerfilter import Replayer as Replayer, Resampler as Resampler
from .tradingcal import PandasMarketCalendar as PandasMarketCalendar
from _typeshed import Incomplete
from backtrader import TimeFrame as TimeFrame, dataseries as dataseries, date2num as date2num, metabase as metabase, num2date as num2date, time2num as time2num
from backtrader.utils import tzparse as tzparse
from backtrader.utils.py3 import range as range, string_types as string_types, with_metaclass as with_metaclass, zip as zip

class MetaAbstractDataBase(dataseries.OHLCDateTime.__class__):
    def __init__(cls, name, bases, dct) -> None: ...
    def dopreinit(cls, _obj, *args, **kwargs): ...
    def dopostinit(cls, _obj, *args, **kwargs): ...

class AbstractDataBase(Incomplete):
    params: Incomplete
    CONNECTED: Incomplete
    DISCONNECTED: Incomplete
    CONNBROKEN: Incomplete
    DELAYED: Incomplete
    LIVE: Incomplete
    NOTSUBSCRIBED: Incomplete
    NOTSUPPORTED_TF: Incomplete
    UNKNOWN: Incomplete
    resampling: int
    replaying: int
    def date2num(self, dt): ...
    def num2date(self, dt: Incomplete | None = None, tz: Incomplete | None = None, naive: bool = True): ...
    def haslivedata(self): ...
    def do_qcheck(self, onoff, qlapse) -> None: ...
    def islive(self): ...
    def put_notification(self, status, *args, **kwargs) -> None: ...
    def get_notifications(self): ...
    def getfeed(self): ...
    def qbuffer(self, savemem: int = 0, replaying: bool = False) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def clone(self, **kwargs): ...
    def copyas(self, _dataname, **kwargs): ...
    def setenvironment(self, env) -> None: ...
    def getenvironment(self): ...
    def addfilter_simple(self, f, *args, **kwargs) -> None: ...
    def addfilter(self, p, *args, **kwargs) -> None: ...
    def compensate(self, other) -> None: ...
    def advance_peek(self): ...
    def advance(self, size: int = 1, datamaster: Incomplete | None = None, ticks: bool = True) -> None: ...
    def next(self, datamaster: Incomplete | None = None, ticks: bool = True): ...
    def preload(self) -> None: ...
    def load(self): ...
    def resample(self, **kwargs) -> None: ...
    def replay(self, **kwargs) -> None: ...

class DataBase(AbstractDataBase): ...

class FeedBase(Incomplete):
    params: Incomplete
    datas: Incomplete
    def __init__(self) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def getdata(self, dataname, name: Incomplete | None = None, **kwargs): ...

class MetaCSVDataBase(DataBase.__class__):
    def dopostinit(cls, _obj, *args, **kwargs): ...

class CSVDataBase(Incomplete):
    f: Incomplete
    params: Incomplete
    separator: Incomplete
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def preload(self) -> None: ...

class CSVFeedBase(FeedBase):
    params: Incomplete

class DataClone(AbstractDataBase):
    data: Incomplete
    def __init__(self) -> None: ...
    def start(self) -> None: ...
    def preload(self) -> None: ...
    def advance(self, size: int = 1, datamaster: Incomplete | None = None, ticks: bool = True) -> None: ...
