from .linebuffer import LineActions as LineActions, LineBuffer as LineBuffer, LineDelay as LineDelay, NAN as NAN
from .lineroot import LineMultiple as LineMultiple, LineRoot as LineRoot
from .metabase import AutoInfoClass as AutoInfoClass
from .utils.py3 import map as map, range as range, string_types as string_types, with_metaclass as with_metaclass
from _typeshed import Incomplete

class LineAlias:
    line: Incomplete
    def __init__(self, line) -> None: ...
    def __get__(self, obj, cls: Incomplete | None = None): ...
    def __set__(self, obj, value) -> None: ...

class Lines:
    @classmethod
    def getlinealiases(cls): ...
    def itersize(self): ...
    lines: Incomplete
    def __init__(self, initlines: Incomplete | None = None) -> None: ...
    def __len__(self) -> int: ...
    def size(self): ...
    def fullsize(self): ...
    def extrasize(self): ...
    def __getitem__(self, line): ...
    def get(self, ago: int = 0, size: int = 1, line: int = 0): ...
    def __setitem__(self, line, value) -> None: ...
    def forward(self, value=..., size: int = 1) -> None: ...
    def backwards(self, size: int = 1, force: bool = False) -> None: ...
    def rewind(self, size: int = 1) -> None: ...
    def extend(self, value=..., size: int = 0) -> None: ...
    def reset(self) -> None: ...
    def home(self) -> None: ...
    def advance(self, size: int = 1) -> None: ...
    def buflen(self, line: int = 0): ...

class MetaLineSeries(LineMultiple.__class__):
    def __new__(meta, name, bases, dct): ...
    def donew(cls, *args, **kwargs): ...

class LineSeries(Incomplete):
    plotinfo: Incomplete
    csv: bool
    @property
    def array(self): ...
    def __getattr__(self, name): ...
    def __len__(self) -> int: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def plotlabel(self): ...
    def __call__(self, ago: Incomplete | None = None, line: int = -1): ...
    def forward(self, value=..., size: int = 1) -> None: ...
    def backwards(self, size: int = 1, force: bool = False) -> None: ...
    def rewind(self, size: int = 1) -> None: ...
    def extend(self, value=..., size: int = 0) -> None: ...
    def reset(self) -> None: ...
    def home(self) -> None: ...
    def advance(self, size: int = 1) -> None: ...

class LineSeriesStub(LineSeries):
    extralines: int
    lines: Incomplete
    owner: Incomplete
    slave: Incomplete
    def __init__(self, line, slave: bool = False) -> None: ...
    def forward(self, value=..., size: int = 1) -> None: ...
    def backwards(self, size: int = 1, force: bool = False) -> None: ...
    def rewind(self, size: int = 1) -> None: ...
    def extend(self, value=..., size: int = 0) -> None: ...
    def reset(self) -> None: ...
    def home(self) -> None: ...
    def advance(self, size: int = 1) -> None: ...
    def qbuffer(self) -> None: ...
    def minbuffer(self, size) -> None: ...

def LineSeriesMaker(arg, slave: bool = False): ...
